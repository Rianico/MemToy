import { HorizontalBox, VerticalBox,  LineEdit, Button, TextEdit, ListView, CheckBox, Palette, StandardButton, ScrollView } from "std-widgets.slint";

import { Style, View, TabType, ViewInfo, RecordRes, Record } from "../common.slint";

import { RichCheckBox, RichCheckBoxController, RichCheckBoxStatus } from "../components/checkbox.slint";
import { AutoPopupWindow, ConfirmPopupWindow } from "../components/popupwindow.slint";
import { GeneralButton, IconButton } from "../components/buttons.slint";
import { DefaultEditor } from "../components/editor.slint";

import { ReviewStatus, ReviewController } from "review-manager.slint";
import { ListStatus, ListController } from "list-manager.slint";
import { GlobalManager } from "global-manager.slint";

component List inherits VerticalLayout {
    in property <[ViewInfo]> page-items;

    Rectangle {
        ListView {
            for record[idx] in ListStatus.records: RichCheckBox {
                in property <Record> cur-record: record;
                in property <int> cur-idx: idx;
                check-visible: false;
                content: self.cur-record.content;

                height: 5rem;
                width: 96%;

                on-select => {
                    details-content.set-selection-offsets(0, 0);
                    ListStatus.selected-record = cur-record;
                }
                on-double-select => {
                    ListStatus.selected-record = cur-record;
                    ListController.open-link(cur-record.content);
                }
                on-del => {
                    ListStatus.deleted-record = self.cur-record;
                    del-warning.show();
                }
                on-edit => {
                    ListStatus.selected-record = self.cur-record;
                    edit-warning.show();
                }
                on-swipe-to-left => {
                }
                on-swipe-to-right => {
                }
            }
        }

        copied-warnning := AutoPopupWindow {
            Rectangle {
                x: parent.width * 38.2%;
                y: parent.height * 38.2%;
                height: parent.height * 23.6%;
                width: parent.width * 23.6%;
                background: Style.popup-win-background;
                border-radius: self.height * 14.6%;
                opacity: 0.8;
                Text {
                    text: "Copy to Clipboard";
                    width: parent.width;
                    wrap: word-wrap;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: Style.popup-win-font-color;
                    font-size: parent.height * 14.6%;
                    font-family: Style.default-font-family;
                }
            }
        }

        del-warning := ConfirmPopupWindow {
            title: "Delete this record?";
            title-font-size: 5rem;
            content: ReviewStatus.deleted-task.content;
            content-font-size: 3rem;

            x: root.width * 5%;
            y: root.height * 5%;
            height: root.height * 80%;
            width: root.width * 90%;

            on-delete => {
                debug("[slint] delete record id: " + ListStatus.deleted-record.id);
                ListController.del-record(ListStatus.deleted-record.id);
                ListStatus.selected-record = { id: 0 };
                GlobalManager.refresh();
            }
            on-close => {
                del-warning.close();
            }
        }

        edit-warning := PopupWindow {
            DefaultEditor {
                content: ListStatus.selected-record.content;

                on-save(content) => {
                    self.record-res = ReviewController.update-task(ReviewStatus.selected-task.id, content);
                    if self.record-res.success {
                        GlobalManager.refresh();
                        ReviewStatus.selected-task.content = content;
                    }
                }

                on-close => {
                    edit-warning.close();
                }

                height: 100%;
                width: 100%;
            }

            x: parent.width * 5%;
            y: parent.height * 5%;
            height: root.height * 90%;
            width: root.width * 90%;
            close-policy: PopupClosePolicy.no-auto-close;
        }
    }

    Rectangle {
        height: 38.2%;

        border-radius: 4px;
        padding: 4px;
        background: Style.details-background-color;
        opacity: 0.618;

        TouchArea {
            mouse-cursor: copy;

            clicked => {
                details-content.copy-content();
                copied-warnning.popup-and-hide();
            }
        }

        details-content := TextEdit {
            text: ListStatus.selected-record.content;
            font-size: 2.2rem;
            width: 100%;
            height: 100%;
            opacity: 0.618;
            horizontal-alignment: left;
            enabled: false;
            wrap: word-wrap;

            function copy-content() {
                details-content.select-all();
                details-content.copy();
                details-content.set-selection-offsets(0, 0);
            }
        }
    }
}

export { List, ListController, ListStatus, Record }

