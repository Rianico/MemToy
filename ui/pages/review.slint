import { HorizontalBox, VerticalBox,  LineEdit, Button, TextEdit, ListView, CheckBox, Palette, StandardButton, ScrollView } from "std-widgets.slint";

import { Style, View, TabType, ViewInfo, RecordRes, Task } from "../common.slint";

import { RichCheckBox, RichCheckBoxController, RichCheckBoxStatus } from "../components/checkbox.slint";
import { AutoPopupWindow } from "../components/popupwindow.slint";
import { GeneralButton, IconButton } from "../components/buttons.slint";
import { DefaultEditor } from "../components/editor.slint";

import { ReviewStatus, ReviewController } from "review-manager.slint";
import { GlobalManager } from "global-manager.slint";


component Review inherits VerticalLayout {
    in property <[ViewInfo]> page-items;

    Rectangle {
        ListView {
            for task[idx] in ReviewStatus.tasks: RichCheckBox {
                in property <Task> cur-task: task;
                in property <int> cur-idx: idx;
                finished: self.cur-task.finished;
                content: self.cur-task.content;
                edit-visible: ReviewStatus.edit-visible;
                del-visible: ReviewStatus.del-visible;

                height: parent.height * 6.18%;
                width: parent.width * 98.382%;

                on-checked => {
                    self.finished = !self.finished;
                    ReviewStatus.tasks[idx].finished = self.finished;
                    ReviewController.toggle-task(cur-task.id, self.finished);
                }
                on-select => {
                    details-content.set-selection-offsets(0, 0);
                    ReviewStatus.selected-task = cur-task;
                }
                on-double-select => {
                    ReviewStatus.selected-task = cur-task;
                    ReviewController.open-link(cur-task.content);
                }
                on-del => {
                    ReviewStatus.deleted-task = self.cur-task;
                    del-warning.show();
                }
                on-edit => {
                    ReviewStatus.selected-task = self.cur-task;
                    edit-warning.show();
                }
                on-swipe-to-left => {
                    ReviewStatus.edit-visible = true;
                    ReviewStatus.del-visible = true;
                }
                on-swipe-to-right => {
                    ReviewStatus.edit-visible = false;
                    ReviewStatus.del-visible = false;
                }
            }
        }

        copied-warnning := AutoPopupWindow {
            Rectangle {
                x: parent.width * 38.2%;
                y: parent.height * 38.2%;
                height: parent.height * 23.6%;
                width: parent.width * 23.6%;
                background: Style.popup-win-background;
                border-radius: self.height * 14.6%;
                opacity: 0.8;
                Text {
                    text: "Copy to Clipboard";
                    width: parent.width;
                    wrap: word-wrap;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: Style.popup-win-font-color;
                    font-size: parent.height * 14.6%;
                    font-family: Style.default-font-family;
                }
            }
        }

        del-warning := PopupWindow {
            x: parent.width * 26.4%;
            y: parent.height * 26.4%;
            height: root.height * 47.2%;
            width: root.width * 47.2%;

            Rectangle {
                height: 100%;
                width: 100%;
                background: Style.popup-win-background;
                border-radius: self.height * 14.6%;
                opacity: 0.9;

                VerticalBox {
                    height: parent.height;
                    width: parent.width;
                    alignment: space-between;

                    Rectangle {
                        height: parent.height * 14.6%;
                        Text {
                            horizontal-alignment: center;
                            vertical-alignment: top;
                            text: "Delete the task?";
                            color: Style.popup-win-font-color;
                            font-size: parent.height / 1.618;
                            font-family: Style.default-font-family;
                            font-weight: 800;
                        }
                    }

                    ScrollView {
                        width: parent.width * 98%;
                        height: parent.height * 52.8%;
                        viewport-height: t.height;
                        t := Text {
                            horizontal-alignment: center;
                            width: parent.width * 90%;
                            text: ReviewStatus.deleted-task.content;
                            color: Style.review-del-warn-font-color;
                            wrap: word-wrap;
                            font-size: parent.height * 14.6%;
                            font-family: Style.default-font-family;
                        }
                    }

                    HorizontalBox {
                        alignment: space-around;
                        min-height: 48px;
                        preferred-height: parent.height * 14.6%;
                        max-height: 64px;

                        // delete
                        IconButton {
                            icon-url: Style.yes-icon;
                            click-button => {
                                debug("[slint] delete task id: " + ReviewStatus.deleted-task.id);
                                ReviewController.del-task(ReviewStatus.deleted-task.id);
                                ReviewStatus.selected-task = { id: 0 };
                                GlobalManager.refresh();
                            }

                            min-height: parent.min-height;
                            preferred-height: parent.preferred-height;
                            max-height: parent.max-height;
                            width: self.preferred-height * 1.618;
                            background: Style.popup-win-background;
                        }

                        // close
                        IconButton {
                            icon-url: Style.close-icon;

                            click-button => {
                                del-warning.close()
                            }

                            min-height: parent.min-height;
                            preferred-height: parent.preferred-height;
                            max-height: parent.max-height;
                            width: self.preferred-height * 1.618;
                            background: Style.popup-win-background;
                        }
                    }
                }
            }
        }

        edit-warning := PopupWindow {
            DefaultEditor {
                content: ReviewStatus.selected-task.content;

                on-save(content) => {
                    self.record-res = ReviewController.update-task(ReviewStatus.selected-task.id, content);
                    if self.record-res.success {
                        GlobalManager.refresh();
                        ReviewStatus.selected-task.content = content;
                    }
                }

                on-close => {
                    edit-warning.close();
                }

                height: parent.height;
                width: parent.width;
            }

            x: parent.width * 5%;
            y: parent.height * 5%;
            height: root.height * 90%;
            width: root.width * 90%;
            close-policy: PopupClosePolicy.no-auto-close;
        }
    }

    Rectangle {
        height: parent.min-height * 22.4%;

        border-radius: 4px;
        padding: 4px;
        background: Style.details-background-color;
        opacity: 0.618;

        TouchArea {
            mouse-cursor: copy;

            clicked => {
                details-content.copy-content();
                copied-warnning.popup-and-hide();
            }
        }

        details-content := TextEdit {
            text: ReviewStatus.selected-task.content;
            font-size: self.height * 14.4%;
            width: 100%;
            height: 100%;
            opacity: 0.618;
            horizontal-alignment: left;
            enabled: false;
            wrap: word-wrap;

            function copy-content() {
                details-content.select-all();
                details-content.copy();
                details-content.set-selection-offsets(0, 0);
            }
        }
    }
}

export { Review, Task }
