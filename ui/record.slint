import { HorizontalBox, VerticalBox,  LineEdit, Button, TextEdit, ListView, CheckBox, Palette } from "std-widgets.slint";

import { Style, View, TabType,  ViewInfo } from "common.slint";

import { Calendar, CalendarStatus } from "components/calendar.slint";
import { ReviewStatus, ReviewController } from "review.slint";


struct RecordRes {
        success: bool,
        msg: string,
}

global RecordController {
    // @return true: success, false: failed
    pure callback save-records(string, string) -> RecordRes;
}

global RecordStatus { }

component Record inherits VerticalLayout {
    in property <[ViewInfo]> page-items;

    Calendar {
        height: 14%;
    }

    Rectangle {
        min-height: parent.min-height * 61.8%;
        preferred-height: parent.min-height * 70%;
        max-height: parent.min-height * 80%;

        record-content := TextEdit {
            font-size: self.height * 4.56%;
            width: 100%;
            height: 100%;
            opacity: 0.618;
            horizontal-alignment: left;
            placeholder-text: "enter your text...";
        }
    }

    save-button := HorizontalBox {
        in-out property <RecordRes> recordd-res;

        min-height: 48px;
        preferred-height: parent.min-height * 9%;
        max-height: 64px;
        alignment: center;

        Rectangle {
            background: Style.save-button-color;
            border-radius: min(self.height / 1.618, 36px);

            min-height: parent.min-height;
            preferred-height: parent.preferred-height;
            max-height: parent.max-height;

            width: root.width * 14.6%;

            Text {
                font-size: min(parent.preferred-height * 44.7%, parent.max-height * 44.7%);
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "save";
                color: Style.tab-font-color;
                TouchArea {
                    clicked => {
                        record-content.focus();
                        save-button.recordd-res = RecordController.save-records(record-content.text, CalendarStatus.date);
                        if save-button.recordd-res.success {
                            ReviewController.refresh();
                        }
                        alert.show();
                        alert-timer.running = true;
                        debug("save function finish");
                    }
                }
            }
        }
    }

    function unfocus-record-content() {
        record-content.clear-focus();
    }

    alert-timer := Timer {
        interval: 1s;
        running: false;
        triggered => {
            debug("alert-time begin");
            alert.close();
            // todo: explore why delete the function and call clear-focus will panic
            parent.unfocus-record-content();
            self.running = false;
        }
    }

    alert := PopupWindow {
        Rectangle {
            x: root.width * 38.2%;
            y: root.height * 23.6%;
            height: root.height * 23.6%;
            width: root.width * 23.6%;
            opacity: 0.618;
            background: Style.tab-font-color;
            border-radius: self.height * 9%;
            Text {
                text: save-button.recordd-res.msg;
                font-size: parent.height * 14.6%;
            }
        }
    }
}

export { Record, RecordStatus, RecordController }
