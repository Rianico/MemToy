import { HorizontalBox, VerticalBox, DatePickerPopup, LineEdit, Button, TextEdit, ListView, CheckBox, Palette } from "std-widgets.slint";

import { CustomCheckBox } from "components/checkbox.slint";

enum TabType { record, review }

enum PageType { record-page, review-page }

struct ViewInfo {
    nav-bar-name: string,
    tab-type: TabType,
    page-type: PageType,
}

export global View {
    in property <[ViewInfo]> view-info: [
        { nav-bar-name: "Record", tab-type: TabType.record, page-type: PageType.record-page },
        { nav-bar-name: "Review", tab-type: TabType.review, page-type: PageType.review-page },
    ];
}

export global Style {
    out property <length> nav-bar-height: 64px;
    out property <length> nav-bar-min-len: 300px;
    out property <color> surface: #7AA9B2;
    out property <color> active-tab-background: #EAD5C0;
    out property <color> tab-font-color: #56640E;
    out property <color> tab-border-color: #023B4A;

    out property <length> min-border: 36px;

    out property <length> calendar-font-size: nav-bar-height;
    out property <length> calendar-height: nav-bar-height * 1.618 * 1.618;

    out property <color> calendar-font-color: #2F5E74;

    out property <duration> animation-default-duration: 318ms;

    out property <length> record-save-height: 36px;
    out property <length> record-save-widdth: record-save-height * 1.618;
    out property <color> save-button-color: #EAD5C0;
}

component NavItem inherits Rectangle {
    in property <ViewInfo> view-info;
    in property <bool> is-active;

    clip: true;
    border-radius: self.height / 1.618;
    border-color: Style.tab-border-color;
    border-width: 0.381px;
    drop-shadow-color: is-active ? Style.active-tab-background : root.background;
    drop-shadow-blur: is-active ? self.height / 1.618 / 1.618 : 0;

    Text {
        text: view-info.nav-bar-name;
        font-size: min(parent.min-height * 44.7%, parent.max-height * 44.7%);
        horizontal-alignment: center;
        vertical-alignment: center;
        color: Style.tab-font-color;
        animate color {
            duration: 381ms;
            easing: ease-out;
        }
    }

    animate background, drop-shadow-blur {
        duration: 618ms;
        easing: ease-in-out;
    }
}

component NavBar inherits HorizontalLayout {
    in property <[ViewInfo]> nav-items;
    out property <TabType> active-tab-type: nav-items[0].tab-type;

    min-height: 36px;
    preferred-height: root.min-height * 9%;
    max-height: 64px;
    spacing: self.width * 1.618%;

    Rectangle {
        width: 27.6%;
    }

    for item in nav-items: NavItem {
        view-info: item;

        min-height: parent.min-height;
        max-height: parent.max-height;
        min-width: parent.width * 0.448 / nav-items.length;
        background: root.active-tab-type == item.tab-type ? Style.active-tab-background : Style.surface;

        TouchArea {
            clicked => {
                active-tab-type = item.tab-type;
                CalendarStatus.date = CalendarController.get_date(0, 0, 0);
                ReviewStatus.records = ReviewController.review-today();
            }
        }
    }

    Rectangle {
        width: 27.6%;
    }
}

export global CalendarController {
    pure callback get_date(int, int, int) -> string;
    pure callback day_of_year(int, int, int) -> string;
}

export global CalendarStatus {
    in-out property <string> date: CalendarController.get_date(0, 0, 0);
    in-out property <string> day_of_year: CalendarController.day_of_year(0, 0, 0);
}

component Calendar inherits Rectangle {
    VerticalLayout {
        alignment: center;
        Rectangle {
            height: 52.8%;
            Text {
                color: Style.calendar-font-color;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: CalendarStatus.date == "" ? "~~~~" : CalendarStatus.date;
                font-size: Style.calendar-font-size;
                TouchArea {
                    clicked => {
                        date-picker.show();
                    }
                }
            }
        }

        Rectangle {
            Text {
                color: Style.calendar-font-color;
                horizontal-alignment: center;
                vertical-alignment: center;
                text: CalendarStatus.day_of_year;
                font-size: Style.calendar-font-size / 1.618;
            }

            date-picker := DatePickerPopup {
                width: root.width / 2;
                height: root.height / 2;
                close-policy: PopupClosePolicy.close-on-click-outside;

                accepted(date) => {
                    CalendarStatus.date = CalendarController.get_date(date.year, date.month, date.day);
                    date-picker.close();
                }

                animate x {
                    duration: Style.animation-default-duration;
                    easing: ease-in-out;
                }
            }
        }
    }
}

export struct RecordRes {
        success: bool,
        msg: string,
}

export global RecordController {
    // @return true: success, false: failed
    pure callback save(string, string) -> RecordRes;
}

export global RecordStatus { }

component Record inherits VerticalLayout {
    in property <[ViewInfo]> page-items;

    Calendar {
        height: 14%;
    }

    Rectangle {
        min-height: parent.min-height * 61.8%;
        preferred-height: parent.min-height * 70%;
        max-height: parent.min-height * 80%;

        record-content := TextEdit {
            font-size: self.height * 5.56%;
            width: 100%;
            height: 100%;
            opacity: 0.618;
            horizontal-alignment: left;
            placeholder-text: "enter your text...";
        }
    }

    save-button := HorizontalBox {
        in-out property <RecordRes> recordd-res: RecordController.save(record-content.text, CalendarStatus.date);

        min-height: 48px;
        preferred-height: parent.min-height * 9%;
        max-height: 64px;
        alignment: center;

        record-rec := Rectangle {
            background: Style.save-button-color;
            border-radius: min(self.height / 1.618, 36px);

            min-height: parent.min-height;
            preferred-height: parent.preferred-height;
            max-height: parent.max-height;

            width: root.width * 14.6%;

            record-text := Text {
                font-size: min(parent.preferred-height * 44.7%, parent.max-height * 44.7%);
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "save";
                color: Style.tab-font-color;
                TouchArea {
                    clicked => {
                        alert.show();
                        record-content.clear-focus();
                        alert-timer.running = true;
                    }
                }
            }
        }
    }

    alert-timer := Timer {
        interval: 1s;
        running: false;
        triggered => {
            alert.close();
            self.running = false;
        }
    }

    alert := PopupWindow {
        Rectangle {
            x: root.width * 38.2%;
            y: root.height * 23.6%;
            opacity: 0.618;
            height: root.height * 23.6%;
            width: root.width * 23.6%;
            background: Style.tab-font-color;
            border-radius: self.height * 9%;
            Text {
                text: save-button.recordd-res.msg;
            }
        }
    }
}

export global ReviewController {
    pure callback review-today() -> [string];
}

export global ReviewStatus {
    in-out property <[string]> records: ReviewController.review_today();
}

component Review {
    in property <[ViewInfo]> page-items;
    VerticalBox {
        ListView {
            for row in ReviewStatus.records: VerticalLayout {
                height: 14%;
                width: parent.width;
                CustomCheckBox {
                    text: row;
                    height: parent.height * 90%;
                    text-size: parent.height * 52.8%;
                    checked: false;
                    padding: 8px;
                    spacing: 8px;
                    TouchArea {
                        changed has-hover => {
                            details.show(row);
                        }
                    }
                }

                HorizontalLayout {
                    height: 6%;
                    TouchArea {
                        changed has-hover => {
                            details.hide();
                        }
                    }
                }
            }
        }

        details := Rectangle {
            height: 14%;
            out property <string> text;

            visible: false;
            border-radius: 4px;
            padding: 4px;
            background: Palette.alternate-background;
            opacity: 0.236;

            Text {
                width: parent.width;
                horizontal-alignment: left;
                vertical-alignment: center;
                text <=> parent.text;
                wrap: word-wrap;
            }

            animate opacity { duration: 236ms; }

            function show(text: string) {
                self.text = text;
                self.visible = true;
                self.opacity = 0.618;
            }

            function hide() {
                self.opacity = 0.236;
                self.visible = false;
            }
        }
    }
}

export component MainWindow inherits Window {
    in-out property <string> name;
    title: "Review Toy";
    min-width: 648px;
    min-height: 400px;
    preferred-height: 900px;
    preferred-width: 1254px;
    background: Style.surface;

    VerticalBox {
        nav := NavBar {
            min-height: 36px;
            width: 100%;
            nav-items: View.view-info;
        }

        if nav.active-tab-type == TabType.record: record := Record {
            min-height: root.height * 80%;
            page-items: View.view-info;
        }

        if nav.active-tab-type == TabType.review: Review {
            min-height: root.height * 80%;
            page-items: View.view-info;
        }
    }
}
