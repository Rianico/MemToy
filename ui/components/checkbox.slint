import { HorizontalBox, Palette } from "std-widgets.slint";
import { Style } from "../common.slint";
import { IconButton } from "buttons.slint";


global RichCheckBoxController { }

global RichCheckBoxStatus { }

component RichCheckBox inherits HorizontalBox {
    in-out property <bool> finished;
    in property <string> content;
    in property <bool> check-visible: true;
    in property <bool> edit-visible: true;
    in property <bool> del-visible: true;
    in property <bool> refresh-visible: true;

    callback on-checked();
    callback on-select();
    callback on-double-select();
    callback on-del();
    callback on-edit();
    callback on-refresh();
    callback on-swipe-to-left();
    callback on-swipe-to-right();

    alignment: space-around;
    spacing: self.height * 2%;
    width: 100%;

    // checked
    check-box := Rectangle {
        visible: check-visible;
        height: 3rem;
        width: check-visible ? 3rem : 0;

        Image {
            colorize: Style.review-task-font-color;
            image-fit: contain;
            height: 61%;
            width: 61%;
            horizontal-alignment: center;
            vertical-alignment: bottom;
            visible: check-visible;
            states [
                checkedd when finished: {
                    source: Style.check-icon;
                }
                unchecked when !finished: {
                    source: Style.check-empty-icon;
                }
            ]

            TouchArea {
                enabled: check-visible;
                clicked => {
                    root.on-checked();
                }
            }

            animate colorize {
                duration: 318ms;
                easing: ease-in-out;
            }
        }
    }

    // content
    Rectangle {
        width: 98% * (parent.width - check-box.width - del.width - edit.width);
        height: 3rem;

        Text {
            width: 100%;
            height: 100%;
            horizontal-alignment: left;
            vertical-alignment: center;
            text: root.content;
            color: Style.review-task-font-color;
            font-size: 2rem;
            font-family: Style.default-font-family;
            overflow: elide;
            TouchArea {
                height: 100%;
                width: 100%;

                clicked => {
                    root.on-select();
                }
                double-clicked => {
                    root.on-double-select();
                }
                moved => {
                    if (self.enabled && self.pressed) {
                        if self.mouse-x - self.pressed-x < -parent.width * 9% {
                            root.on-swipe-to-left();
                        } else if self.mouse-x - self.pressed-x > parent.width * 9% {
                            root.on-swipe-to-right();
                        }
                    }
                }
            }
        }
    }

    edit := IconButton {
        property <bool> hovered: false;

        icon-color: Style.review-task-font-color;
        icon-url: Style.edit-icon;
        visible: edit-visible;

        opacity: 0.381;
        width: 3rem;
        height: 3rem;

        click-button => {
            root.on-edit();
        }
        hover-action => {
            hovered = !hovered;
        }
        states [
            show when hovered: {
                opacity: 0.618;
            }
            hide when !hovered: {
                opacity: 0.381;
            }
        ]

        animate opacity {
            duration: 618ms;
            easing: ease-out;
        }
    }

    del := IconButton {
        property <bool> hovered: false;

        icon-color: Style.review-task-font-color;
        icon-url: Style.trashbin-icon;
        visible: del-visible;

        opacity: 0.381;
        width: 3rem;
        height: 3rem;

        click-button => {
            root.on-del();
        }
        hover-action => {
            hovered = !hovered;
        }
        states [
            show when hovered: {
                opacity: 0.618;
            }
            hide when !hovered: {
                opacity: 0.381;
            }
        ]

        animate opacity {
            duration: 618ms;
            easing: ease-out;
        }
    }

    refresh := IconButton {
        property <bool> hovered: false;

        icon-color: Style.review-task-font-color;
        icon-url: Style.refresh-icon;
        visible: refresh-visible;

        opacity: 0.381;
        width: 3rem;
        height: 3rem;

        click-button => {
            root.on-refresh();
        }
        hover-action => {
            hovered = !hovered;
        }
        states [
            show when hovered: {
                opacity: 0.618;
            }
            hide when !hovered: {
                opacity: 0.381;
            }
        ]

        animate opacity {
            duration: 618ms;
            easing: ease-out;
        }
    }
}

export { RichCheckBox, RichCheckBoxController, RichCheckBoxStatus }
