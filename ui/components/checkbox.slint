import { HorizontalBox, Palette } from "std-widgets.slint";
import { Style } from "../common.slint";
import { IconButton } from "buttons.slint";


global RichCheckBoxController { }

global RichCheckBoxStatus { }

component RichCheckBox inherits HorizontalLayout {
    in-out property <bool> finished;
    in property <string> content;

    callback on-checked();
    callback on-select();
    callback on-double-select();
    callback on-del();
    callback on-edit();
    callback on-swipe-to-left();
    callback on-swipe-to-right();

    alignment: space-around;
    spacing: self.height * 4%;

    // checked
    check-box := Rectangle {
        width: parent.height * 32.6%;
        height: parent.height * 52.8%;

        Image {
            colorize: Style.review-task-font-color;
            image-fit: contain;
            height: parent.height;
            width: parent.width;
            vertical-alignment: center;
            states [
                checkedd when finished: {
                    source: @image-url("../../ui/icons/ElCheck.svg");
                }
                unchecked when !finished: {
                    source: @image-url("../../ui/icons/ElCheckEmpty.svg");
                }
            ]

            TouchArea {
                clicked => {
                    root.on-checked();
                }
            }

            animate colorize {
                duration: 318ms;
                easing: ease-in-out;
            }
        }
    }

    // content
    Rectangle {
        height: parent.height * 52.8%;
        width: (parent.width - check-box.width - func-area.width) * 98%;
        cache-rendering-hint: true;
        Text {
            width: parent.width;
            height: parent.height;
            horizontal-alignment: left;
            vertical-alignment: center;
            text: root.content;
            color: Style.review-task-font-color;
            font-size: parent.height / 1.618;
            font-family: Style.default-font-family;
            overflow: elide;
            cache-rendering-hint: true;
            TouchArea {
                height: parent.height;
                width: parent.width;

                clicked => {
                    root.on-select();
                }
                double-clicked => {
                    root.on-double-select();
                }
                moved => {
                    if (self.enabled && self.pressed) {
                        if self.mouse-x - self.pressed-x < -parent.width * 9% {
                            root.on-swipe-to-left();
                        } else if self.mouse-x - self.pressed-x > parent.width * 9% {
                            root.on-swipe-to-right();
                        }
                    }
                }
            }
        }
    }

    func-area := HorizontalBox {
        height: parent.height * 47.2%;
        width: edit.width + del.width;

        edit := IconButton {
            property <bool> hovered: false;
            icon-color: Style.review-task-font-color;
            icon-url: @image-url("../../ui/icons/MynauiEdit.svg");

            click-button => {
                root.on-edit();
            }
            hover-action => {
                hovered = !hovered;
            }
            states [
                show when hovered: {
                    opacity: 0.618;
                }
                hide when !hovered: {
                    opacity: 0;
                }
            ]

            opacity: 0;
            width: parent.height;
            height: parent.height;

            animate opacity {
                duration: 618ms;
                easing: ease-out;
            }
        }

        del := IconButton {
            property <bool> hovered: false;
            icon-color: Style.review-task-font-color;
            icon-url: @image-url("../../ui/icons/SolarTrashBin2Outline.svg");

            click-button => {
                root.on-del();
            }
            hover-action => {
                hovered = !hovered;
            }
            states [
                show when hovered: {
                    opacity: 0.618;
                }
                hide when !hovered: {
                    opacity: 0;
                }
            ]

            opacity: 0;
            width: parent.height;
            height: parent.height;

            animate opacity {
                duration: 618ms;
                easing: ease-out;
            }
        }
    }
}

export { RichCheckBox, RichCheckBoxController, RichCheckBoxStatus }
