import { HorizontalBox, VerticalBox,  LineEdit, Button, TextEdit, ListView, CheckBox, Palette } from "std-widgets.slint";

import { Style, View, TabType,  ViewInfo } from "common.slint";

import { CustomCheckBox, CustomCheckBoxController, Task } from "components/checkbox.slint";

global ReviewController {
    pure callback review-today() -> [Task];
    public function refresh() {
        debug("refresh Review Page");
        ReviewStatus.tasks = ReviewController.review-today();
    }
}

global ReviewStatus {
    in property <[Task]> tasks: ReviewController.review-today();
}

component Review inherits VerticalLayout {
    in property <[ViewInfo]> page-items;

    ListView {
        for task[idx] in ReviewStatus.tasks: VerticalLayout {
            height: 14%;
            width: parent.width;

            TouchArea {
                height: 90%;
                width: 90%;

                content := CustomCheckBox {
                    task: task;
                    idx: idx;
                    height: root.height * 9%;
                    padding: 8px;
                    spacing: 8px;
                    TouchArea {
                        clicked => {
                            parent.finished = !parent.finished; // Toggle the finished state
                            ReviewStatus.tasks[idx].finished = parent.finished;
                            CustomCheckBoxController.toggle-task(task.id, parent.finished);
                        }
                    }
                }

                clicked => {
                    details.show-content(task.content);
                }

                double-clicked => {
                    details.copy-content();
                    alert-popup();
                }
            }
        }
    }

    details := Rectangle {
        height: parent.min-height * 22.4%;

        border-radius: 4px;
        padding: 4px;
        background: Style.details-background-color;
        opacity: 0.618;

        TouchArea {
            mouse-cursor: copy;

            clicked => {
                alert-popup();
            }

            details-content := TextEdit {
                font-size: self.height * 14.4%;
                width: 100%;
                height: 100%;
                opacity: 0.618;
                horizontal-alignment: left;
                enabled: false;
                wrap: word-wrap;
            }
        }

        animate opacity { duration: 236ms; }

        function show-content(text: string) {
            details-content.text = text;
            details-content.set-selection-offsets(0, 0);
        }

        function copy-content() {
            details-content.select-all();
            details-content.copy();
            details-content.set-selection-offsets(0, 0);
        }
    }

    function alert-popup() {
        alert.show();
        alert-timer.running = true;
    }

    alert := PopupWindow {
        Rectangle {
            x: root.width * 38.2%;
            y: root.height * 23.6%;
            height: root.height * 23.6%;
            width: root.width * 23.6%;
            opacity: 0.618;
            background: Style.tab-font-color;
            border-radius: self.height * 9%;
            Text {
                text: "Copy to Clipboard";
                font-size: parent.height * 14.6%;
            }
        }

        function popup() {
            self.show();
            alert-timer.running = true;
        }
    }

    alert-timer := Timer {
        interval: 1s;
        running: false;
        triggered => {
            alert.close();
            self.running = false;
        }
    }
}

export { Review, ReviewController, ReviewStatus, Task }
