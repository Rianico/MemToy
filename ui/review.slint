import { HorizontalBox, VerticalBox,  LineEdit, Button, TextEdit, ListView, CheckBox, Palette } from "std-widgets.slint";

import { Style, View, TabType,  ViewInfo } from "common.slint";

import { CustomCheckBox, Task } from "components/checkbox.slint";

global ReviewController {
    pure callback review-today() -> [Task];
}

global ReviewStatus {
    in-out property <[Task]> records: ReviewController.review_today();
}

component Review inherits VerticalLayout {
    in property <[ViewInfo]> page-items;

    ListView {
        for task in ReviewStatus.records: VerticalLayout {
            height: 14%;
            width: parent.width;
            content := CustomCheckBox {
                task: task;
                height: parent.height * 90%;
                text-size: parent.height * 52.8%;
                padding: 8px;
                spacing: 8px;
                TouchArea {
                    changed has-hover => {
                        details.show(task.content);
                    }
                }
            }

            HorizontalLayout {
                height: 6%;
                TouchArea {
                    changed has-hover => {
                        details.hide();
                    }
                }
            }
        }
    }

    details := Rectangle {
        height: parent.min-height * 22.4%;

        out property <string> text;

        visible: false;
        border-radius: 4px;
        padding: 4px;
        background: Palette.alternate-background;
        opacity: 0.236;

        Text {
            width: parent.width;
            horizontal-alignment: left;
            vertical-alignment: center;
            text <=> parent.text;
            font-size: parent.height * 14.4%;
            wrap: word-wrap;
        }

        animate opacity { duration: 236ms; }

        function show(text: string) {
            self.text = text;
            self.visible = true;
            self.opacity = 0.618;
        }

        function hide() {
            self.opacity = 0.236;
            self.visible = false;
        }
    }
}

export { Review, ReviewController, ReviewStatus, Task }
